{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Automated OpenEMR 5.0.0 Configuration [in progress]",

  "Parameters" : {
    "EC2KeyPair" : {
      "Description" : "Amazon EC2 Key Pair",
      "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "RDSPassword" : {
      "NoEcho" : "true",
      "Description" : "The database admin account password",
      "Type" : "String",
      "MinLength" : "8",
      "MaxLength" : "41"
    },
    "TimeZone": {
      "Type": "String",
      "Default": "America/Chicago",
      "MaxLength": "41",
      "Description" : "The timezone OpenEMR will run in"
    },
    "DeveloperMode": {
      "Type" : "String",
      "Default" : "yes",
      "AllowedValues" : ["yes", "no"],
      "Description" : "won't be in the final release"
    }
  },

  "Conditions" : {
    "DevOnly" : {"Fn::Equals" : [{"Ref" : "DeveloperMode"}, "yes"]}
  },

  "Mappings" : {

    "RegionData" : {
      "us-east-1" : {
        "RegionBucket": "openemr-useast1",
        "ApplicationSource": "beanstalk/openemr-5.0.0-003.zip",
        "BackupManager": "backupmanager/backupManager.001.zip",
        "MySQLVersion": "5.6.27",
        "AmazonAMI": "ami-a4c7edb2",
        "UbuntuAMI": "ami-d15a75c7"
      },
      "us-east-2" : {
        "RegionBucket": "openemr-useast2",
        "ApplicationSource": "beanstalk/openemr-5.0.0-002.zip",
        "BackupManager": "backupmanager/backupManager.001.zip",
        "MySQLVersion": "5.6.35",
        "UbuntuAMI": "ami-8b92b4ee"
      },
      "us-west-2" : {
        "RegionBucket": "openemr-uswest2",
        "ApplicationSource": "beanstalk/openemr-5.0.0-002.zip",
        "BackupManager": "backupmanager/backupManager.001.zip",
        "MySQLVersion": "5.6.27",
        "UbuntuAMI": "ami-835b4efa"
      },
      "eu-west-1" : {
        "RegionBucket": "openemr-euwest1",
        "ApplicationSource": "beanstalk/openemr-5.0.0-002.zip",
        "BackupManager": "backupmanager/backupManager.001.zip",
        "MySQLVersion": "5.6.27",
        "UbuntuAMI": "ami-6d48500b"
      },
      "ap-southeast-2" : {
        "RegionBucket": "openemr-apsoutheast2",
        "ApplicationSource": "beanstalk/openemr-5.0.0-002.zip",
        "BackupManager": "backupmanager/backupManager.001.zip",
        "MySQLVersion": "5.6.27",
        "UbuntuAMI": "ami-e94e5e8a"
      }
    }
  },

  "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16",
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags" : [
			{"Key" : "Name", "Value" : "OpenEMR" },
			{"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
		]
      }
    },

    "SubnetPublic1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.1.0/24",
		"AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs": "" } ] },
        "Tags" : [
			{"Key" : "Name", "Value" : "Public #1" },
			{"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
		]
      }
    },

	"SubnetPrivate1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.2.0/24",
		"AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs": "" } ] },
        "Tags" : [
			{"Key" : "Name", "Value" : "Private #1" },
			{"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
		]
      }
    },

	"SubnetPublic2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.3.0/24",
		"AvailabilityZone": { "Fn::Select": [ "1", { "Fn::GetAZs": "" } ] },
        "Tags" : [
			{"Key" : "Name", "Value" : "Public #2" },
			{"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
		]
      }
    },

	"SubnetPrivate2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.4.0/24",
		"AvailabilityZone": { "Fn::Select": [ "1", { "Fn::GetAZs": "" } ] },
        "Tags" : [
			{"Key" : "Name", "Value" : "Private #2" },
			{"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
		]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "RouteTablePublic" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "RoutePublic" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTablePublic" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "SubnetRouteTableAssociationPublic1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetPublic1" },
        "RouteTableId" : { "Ref" : "RouteTablePublic" }
      }
    },

	"SubnetRouteTableAssociationPublic2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetPublic2" },
        "RouteTableId" : { "Ref" : "RouteTablePublic" }
      }
    },

	"RouteTablePrivate" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

	"EIPNATGatewayPublic1" : {
	  "Type" : "AWS::EC2::EIP",
	  "Properties" : {
		"Domain" : "vpc"
	  }
	},

	"NATGatewayPublic1" : {
	  "Type" : "AWS::EC2::NatGateway",
	  "Properties" : {
		"AllocationId" : { "Fn::GetAtt" : ["EIPNATGatewayPublic1", "AllocationId"]},
		"SubnetId" : { "Ref" : "SubnetPublic1"}
	  }
	},

	"RoutePrivate" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTablePrivate" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NATGatewayPublic1" }
      }
    },

	"SubnetRouteTableAssociationPrivate1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetPrivate1" },
        "RouteTableId" : { "Ref" : "RouteTablePrivate" }
      }
    },

	"SubnetRouteTableAssociationPrivate2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetPrivate2" },
        "RouteTableId" : { "Ref" : "RouteTablePrivate" }
      }
    },

    "DNS": {
      "Type": "AWS::Route53::HostedZone",
      "Properties": {
        "HostedZoneConfig": {
          "Comment": "private OpenEMR domain"
        },
        "Name": "oemr.local",
        "VPCs": [{
          "VPCId": { "Ref" : "VPC"},
          "VPCRegion": { "Ref": "AWS::Region"}
        }]
      }
    },

    "ApplicationSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
         "GroupDescription" : "Application Security Group",
         "Tags" :  [ { "Key" : "Name", "Value" : "Application" } ],
         "VpcId" : {"Ref" : "VPC"}
      }
    },

    "AppSGIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
          "GroupId": { "Ref": "ApplicationSecurityGroup" },
          "IpProtocol": "-1",
          "SourceSecurityGroupId" : { "Ref": "ApplicationSecurityGroup"}
      }
    },

    "SSHSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Condition": "DevOnly",
      "Properties" : {
         "GroupDescription" : "Public SSH Access",
         "Tags" :  [ { "Key" : "Name", "Value" : "Global SSH" } ],
         "VpcId" : {"Ref" : "VPC"}
      }
    },

    "SSHSGIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "DevOnly",
      "Properties": {
          "GroupId": { "Ref": "SSHSecurityGroup" },
          "IpProtocol": "tcp",
          "CidrIp": "0.0.0.0/0",
          "FromPort": "22",
          "ToPort": "22"
      }
    },

    "DeveloperBastion": {
      "Type": "AWS::EC2::Instance",
      "Condition" : "DevOnly",
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionData", { "Ref" : "AWS::Region" }, "AmazonAMI"] },
        "InstanceType"   : "t2.nano",
        "KeyName"        : { "Ref" : "EC2KeyPair" },
        "NetworkInterfaces": [ {
          "AssociatePublicIpAddress": "true",
          "DeviceIndex": "0",
          "GroupSet": [ {"Ref" : "SSHSecurityGroup"}, {"Ref" : "ApplicationSecurityGroup"} ],
          "SubnetId": { "Ref" : "SubnetPublic2" }
        } ],
        "Tags" : [ { "Key" : "Name", "Value" : "Developer Bastion" } ]
      }
    },

    "OpenEMRKey" : {
      "Type" : "AWS::KMS::Key",
      "DeletionPolicy": "Retain",
      "Properties" : {
        "Description" : "Encrypts Patient Records",
        "KeyPolicy" : {
          "Version": "2012-10-17",
          "Id": "key-default-1",
          "Statement": [
            {
              "Sid": "Enable IAM User Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Join": [
                      ":",
                      [
                        "arn:aws:iam:",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "root"
                      ]
                    ]
                  }
                ]
              },
              "Action": "kms:*",
              "Resource": "*"
            }
          ]
        }
      }
    },

  "EFSSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
       "GroupDescription" : "EFS Access",
       "Tags" :  [ { "Key" : "Name", "Value" : "PatientDocumentAccess" } ],
       "VpcId" : {"Ref" : "VPC"}
    }
  },

  "EFSSGIngress": {
    "Type": "AWS::EC2::SecurityGroupIngress",
    "Properties": {
        "GroupId": { "Ref": "EFSSecurityGroup" },
        "IpProtocol": "-1",
        "SourceSecurityGroupId" : { "Ref": "ApplicationSecurityGroup"}
    }
  },

  "ElasticFileSystem" : {
    "Type" : "AWS::EFS::FileSystem",
    "DeletionPolicy": "Retain",
    "Properties" : {
      "FileSystemTags" : [ { "Key" : "Name", "Value" : "OpenEMR Codebase" } ]
    }
  },

  "DNSEFS" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
         "HostedZoneId" : { "Ref" : "DNS" },
         "Name" : "nfs.oemr.local",
         "Type" : "CNAME",
         "TTL" : "900",
         "ResourceRecords" : [ { "Fn::Join" : [ "", [
            {"Ref" : "ElasticFileSystem"},
            ".efs.",
            {"Ref" : "AWS::Region"},
            ".amazonaws.com"
            ]]}]
      }
   },

  "EFSMountPrivate1": {
    "Type": "AWS::EFS::MountTarget",
    "Properties": {
      "FileSystemId": { "Ref": "ElasticFileSystem" },
      "SubnetId": { "Ref": "SubnetPrivate1" },
      "SecurityGroups": [ { "Ref": "EFSSecurityGroup" } ]
    }
  },

  "EFSMountPrivate2": {
    "Type": "AWS::EFS::MountTarget",
    "Properties": {
      "FileSystemId": { "Ref": "ElasticFileSystem" },
      "SubnetId": { "Ref": "SubnetPrivate2" },
      "SecurityGroups": [ { "Ref": "EFSSecurityGroup" } ]
    }
  },

  "RDSSubnetGroup": {
     "Type" : "AWS::RDS::DBSubnetGroup",
     "Properties" : {
        "DBSubnetGroupDescription" : "OpenEMR DB Subnet",
        "SubnetIds" : [ {"Ref":"SubnetPrivate1"}, {"Ref":"SubnetPrivate2"} ]
     }
  },

  "DBSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
       "GroupDescription" : "RDS Access",
       "Tags" :  [ { "Key" : "Name", "Value" : "PatientRecordsAccess" } ],
       "VpcId" : {"Ref" : "VPC"}
    }
  },

  "DBSGIngress": {
    "Type": "AWS::EC2::SecurityGroupIngress",
    "Properties": {
        "GroupId": { "Ref": "DBSecurityGroup" },
        "IpProtocol": "-1",
        "SourceSecurityGroupId" : { "Ref": "ApplicationSecurityGroup"}
    }
  },

  "RDSInstance" : {
     "Type" : "AWS::RDS::DBInstance",
     "DeletionPolicy": "Snapshot",
     "Properties" : {
        "DBName" : "openemr",
        "AllocatedStorage" : "10",
        "DBInstanceClass" : "db.t2.small",
        "Engine" : "MySQL",
        "EngineVersion" : { "Fn::FindInMap" : [ "RegionData", { "Ref" : "AWS::Region" }, "MySQLVersion"]},
        "MasterUsername" : "openemr",
        "MasterUserPassword" : { "Ref" : "RDSPassword" },
        "PubliclyAccessible": "false",
        "DBSubnetGroupName": {"Ref": "RDSSubnetGroup"},
        "VPCSecurityGroups": [{"Ref": "DBSecurityGroup"}],
        "KmsKeyId": {"Ref" : "OpenEMRKey"},
        "StorageEncrypted": "true",
        "MultiAZ": "false",
        "Tags" : [ { "Key" : "Name", "Value" : "Patient Records" } ]
     }
  },

  "DNSRDS" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
         "HostedZoneId" : { "Ref" : "DNS" },
         "Name" : "mysql.oemr.local",
         "Type" : "CNAME",
         "TTL" : "900",
         "ResourceRecords" : [ { "Fn::GetAtt" : ["RDSInstance", "Endpoint.Address" ] } ]
      }
   },

  "S3Bucket": {
    "Type": "AWS::S3::Bucket",
    "DeletionPolicy": "Retain",
    "Properties": {
        "BucketName" : { "Fn::Join" : [ "-", [
          "openemr",
          { "Fn::Select" : [ "2", { "Fn::Split": ["/", {"Ref": "AWS::StackId"}]}] }
        ] ] }
    }
  },
  "BucketPolicy" : {
    "Type" : "AWS::S3::BucketPolicy",
    "Properties" : {
      "Bucket" : {"Ref" : "S3Bucket"},
      "PolicyDocument" : {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSCloudTrailAclCheck",
            "Effect": "Allow",
            "Principal": { "Service":"cloudtrail.amazonaws.com"},
            "Action": "s3:GetBucketAcl",
            "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref":"S3Bucket"}]]}
          },
          {
            "Sid": "AWSCloudTrailWrite",
            "Effect": "Allow",
            "Principal": { "Service":"cloudtrail.amazonaws.com"},
            "Action": "s3:PutObject",
            "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref":"S3Bucket"}, "/AWSLogs/", {"Ref":"AWS::AccountId"}, "/*"]]},
            "Condition": {
              "StringEquals": {
                "s3:x-amz-acl": "bucket-owner-full-control"
              }
            }
          }
        ]
      }
    }
  },
  "CloudTrail": {
    "DependsOn" : ["BucketPolicy"],
    "Type": "AWS::CloudTrail::Trail",
    "Properties": {
      "IsLogging": "true",
      "IncludeGlobalServiceEvents" : "true",
      "IsMultiRegionTrail" : "true",
      "S3BucketName": { "Ref" : "S3Bucket" }
    }
  },

  "RedisSubnetGroup" :  {
    "Type": "AWS::ElastiCache::SubnetGroup",
    "Properties": {
        "Description": "Redis node locations",
        "SubnetIds": [
            {
                "Ref": "SubnetPrivate2"
            },
            {
                "Ref": "SubnetPrivate1"
            }
        ]
      }
    },

  "RedisSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
       "GroupDescription" : "Redis Access",
       "Tags" :  [ { "Key" : "Name", "Value" : "OpenEMR Sessions" } ],
       "VpcId" : {"Ref" : "VPC"}
    }
  },

  "RedisSGIngress": {
    "Type": "AWS::EC2::SecurityGroupIngress",
    "Properties": {
        "GroupId": { "Ref": "RedisSecurityGroup" },
        "IpProtocol": "-1",
        "SourceSecurityGroupId" : { "Ref": "ApplicationSecurityGroup"}
    }
  },

   "RedisCluster" : {
      "Type": "AWS::ElastiCache::CacheCluster",
      "Properties": {
        "CacheNodeType"           : "cache.t2.small",
        "VpcSecurityGroupIds": [{"Fn::GetAtt": [ "RedisSecurityGroup", "GroupId"]}],
        "CacheSubnetGroupName"    : { "Ref": "RedisSubnetGroup"},
        "Engine"                  : "redis",
        "NumCacheNodes"           : "1"
      }
    },

    "DNSRedis" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
         "HostedZoneId" : { "Ref" : "DNS" },
         "Name" : "redis.oemr.local",
         "Type" : "CNAME",
         "TTL" : "900",
         "ResourceRecords" : [{ "Fn::GetAtt" : ["RedisCluster", "RedisEndpoint.Address"]}
 ]
      }
   },

    "CouchDBSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
         "GroupDescription" : "CouchDB Access",
         "Tags" :  [ { "Key" : "Name", "Value" : "PatientDocumentsAccess" } ],
         "VpcId" : {"Ref" : "VPC"}
      }
    },

    "CouchDBSGIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
          "GroupId": { "Ref": "CouchDBSecurityGroup" },
          "IpProtocol": "-1",
          "SourceSecurityGroupId" : { "Ref": "ApplicationSecurityGroup"}
      }
    },

    "CouchDBVolume" : {
       "Type" : "AWS::EC2::Volume",
       "DeletionPolicy": "Snapshot",
       "Properties" : {
          "Size" : "500",
          "AvailabilityZone" : { "Fn::Select": [ "0", { "Fn::GetAZs": "" } ] },
          "VolumeType" : "sc1",
          "Encrypted": "true",
          "KmsKeyId" : {"Ref" : "OpenEMRKey"},
          "Tags" : [ { "Key" : "Name", "Value" : "Patient Documents" } ]
       }
    },

    "CouchDBInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "Setup" : [ "Install" ]
          },

          "Install" : {
            "files" : {
              "/tmp/ip.ini" : {
                "content" : { "Fn::Join" : ["", [
                  "[httpd]\n",
                  "bind_address = 0.0.0.0\n"
                  ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/tmp/fstab.append" : {
                "content" : { "Fn::Join" : ["", [
                  "/dev/xvdd /mnt/db ext4 defaults,nofail 0 0\n"
                  ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },

            "commands" : {
              "01_security" : {
                "command" : "DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -y -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\" --force-yes"
              },
              "02_format_volume" : {
                "command" : "mkfs -t ext4 /dev/xvdd"
              },
              "03_create_mount_point" : {
                "command" : "mkdir /mnt/db"
              },
              "04_update_fstab" : {
                "command" : "cat /tmp/fstab.append >> /etc/fstab"
              },
              "05_mount_db_volume" : {
                "command" : "mount /mnt/db"
              },
              "06_install" : {
                "command" : "apt-get -y install couchdb"
              },
              "07_sleep" : {
                "command" : "service couchdb stop"
              },
              "08_rehome" : {
                "command" : "mv /var/lib/couchdb /mnt/db/couchdb && ln -s /mnt/db/couchdb /var/lib/couchdb"
              },
              "09_configure" : {
                "command" : "cp /tmp/ip.ini /etc/couchdb/local.d && chown couchdb:couchdb /etc/couchdb/local.d/ip.ini"
              },
              "10_wake": {
                "command" : "service couchdb restart"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionData", { "Ref" : "AWS::Region" }, "UbuntuAMI"] },
        "InstanceType"   : "t2.micro",
        "SubnetId"       : { "Ref": "SubnetPrivate1"},
        "SecurityGroupIds" : [ {"Ref" : "CouchDBSecurityGroup"} ],
        "KeyName"        : { "Ref" : "EC2KeyPair" },
        "Volumes"        : [{
              "Device" : "/dev/sdd",
              "VolumeId" : { "Ref" : "CouchDBVolume" }
        }],
        "Tags" : [ { "Key" : "Name", "Value" : "CouchDB Server" } ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "exec > /tmp/part-001.log 2>&1\n",
             "# this isn't stock on official Ubuntu instance /why/\n",
             "apt-get -y update\n",
             "apt-get -y install python-pip\n",
             "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
             "#cp /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup \n",
             "#chmod +x /etc/init.d/cfn-hup \n",
             "#update-rc.d cfn-hup defaults \n ",
             "#service cfn-hup start \n",
             "# Install the files and packages from the metadata\n",
             "cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource CouchDBInstance ",
             "         --configsets Setup ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",
             "# Signal the status from cfn-init\n",
             "cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource CouchDBInstance ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT5M"
        }
      }
    },

    "DNSCouchDB" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
         "HostedZoneId" : { "Ref" : "DNS" },
         "Name" : "couchdb.oemr.local",
         "Type" : "CNAME",
         "TTL" : "900",
         "ResourceRecords" : [ { "Fn::GetAtt" : [ "CouchDBInstance", "PrivateDnsName" ] } ]
      }
   },

    "LambdaBackupPolicy" : {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" : {
        "Description" : "Policy for managing snapshot backups",
        "Roles" : [{ "Ref": "BackupExecutionRole"}],
        "PolicyDocument" :   {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Sid": "Stmt1500138045000",
                  "Effect": "Allow",
                  "Action": [
                      "ec2:DescribeVolumeStatus",
                      "ec2:DescribeSnapshots",
                      "ec2:CreateSnapshot",
                      "ec2:DeleteSnapshot"
                  ],
                  "Resource": [
                      "*"
                  ]
              }
          ]
        }
      }
    },

    "BackupExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{ "Effect": "Allow", "Action": ["logs:*"], "Resource": "arn:aws:logs:*:*:*" }]
          }
        }]
      }
    },

    "BackupManagerFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "handles patient document (CouchDB) backups",
        "Handler": "volumeBackupManager.lambda_handler",
        "Role": { "Fn::GetAtt" : ["BackupExecutionRole", "Arn"] },
        "Code": {
          "S3Bucket" : { "Fn::FindInMap" : [ "RegionData", { "Ref" : "AWS::Region" }, "RegionBucket"]},
          "S3Key" : { "Fn::FindInMap" : [ "RegionData", { "Ref" : "AWS::Region" }, "BackupManager"]}
        },
        "Environment": {
          "Variables": {
            "VOLUME_ID" : { "Ref" : "CouchDBVolume"}
          }
        },
        "Runtime": "python2.7",
        "Timeout": "15"
      },
      "DependsOn": "LambdaBackupPolicy"
    },

    "LambdaScheduler": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "ScheduledRule",
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Targets": [{
          "Arn": { "Fn::GetAtt": ["BackupManagerFunction", "Arn"] },
          "Id": "BackupManagerV1"
        }]
      }
    },

    "LambdaSchedulerPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "BackupManagerFunction" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["LambdaScheduler", "Arn"] }
      }
    },

    "EBApplication" : {
      "Type" : "AWS::ElasticBeanstalk::Application",
      "Properties" : {
        "Description" : "OpenEMR Application Stack"
      }
    },

    "EBApplicationVersion" : {
      "Type" : "AWS::ElasticBeanstalk::ApplicationVersion",
      "Properties" : {
        "Description" : "Version 5.0.0",
        "ApplicationName" : { "Ref" : "EBApplication" },
        "SourceBundle" : {
          "S3Bucket" : { "Fn::FindInMap" : [ "RegionData", { "Ref" : "AWS::Region" }, "RegionBucket"]},
          "S3Key" : { "Fn::FindInMap" : [ "RegionData", { "Ref" : "AWS::Region" }, "ApplicationSource"]}
        }
      }
    },

    "EBEnvironment" : {
     "Type" : "AWS::ElasticBeanstalk::Environment",
     "Properties" : {
       "ApplicationName" : { "Ref" : "EBApplication" },
        "Description" :  "OpenEMR v5.0.0, cloud deployment 001",
        "SolutionStackName" : "64bit Amazon Linux 2017.03 v2.4.1 running PHP 7.0",
        "VersionLabel" : { "Ref" : "EBApplicationVersion" },
        "OptionSettings" : [
          {"Namespace" : "aws:autoscaling:launchconfiguration", "OptionName" : "SecurityGroups", "Value" : { "Ref" : "ApplicationSecurityGroup" }},
          {"Namespace" : "aws:autoscaling:launchconfiguration", "OptionName" : "EC2KeyName", "Value" : { "Ref" : "EC2KeyPair" }},
          {"Namespace" : "aws:autoscaling:launchconfiguration", "OptionName" : "InstanceType", "Value" : "t2.micro" },
          {"Namespace" : "aws:elb:policies", "OptionName" : "ConnectionDrainingEnabled", "Value" : "true"},
          {"Namespace" : "aws:elb:policies", "OptionName" : "ConnectionSettingIdleTimeout", "Value" : "3600"},
          {"Namespace" : "aws:ec2:vpc", "OptionName" : "VPCId", "Value" : { "Ref" : "VPC" }},
          {"Namespace" : "aws:ec2:vpc", "OptionName" : "Subnets", "Value" :
            { "Fn::Join" : [ ",", [ {"Ref": "SubnetPrivate1"}, {"Ref": "SubnetPrivate2"} ] ] }
          },
          {"Namespace" : "aws:ec2:vpc", "OptionName" : "ELBSubnets", "Value" :
            { "Fn::Join" : [ ",", [ {"Ref": "SubnetPublic1"}, {"Ref": "SubnetPublic2"} ] ] }
          },
          {"Namespace" : "aws:elasticbeanstalk:application", "OptionName": "Application Healthcheck URL", "Value": "/openemr/version.php"},
          {"Namespace" : "aws:elasticbeanstalk:application:environment", "OptionName": "TIMEZONE", "Value": {"Ref" : "TimeZone"}},
          {"Namespace" : "aws:elasticbeanstalk:application:environment", "OptionName": "REDIS_IP", "Value": "redis.oemr.local"},
          {"Namespace" : "aws:elasticbeanstalk:application:environment", "OptionName": "FILE_SYSTEM_ID", "Value": {"Ref" : "ElasticFileSystem"}},
          {"Namespace" : "aws:elasticbeanstalk:application:environment", "OptionName": "NFS_HOSTNAME", "Value": "nfs.oemr.local"}
       ]
     }
   }


},

  "Outputs" : {
    "OpenEMR" : {
      "Description" : "OpenEMR Setup",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : ["EBEnvironment", "EndpointURL"] }, "/openemr"]]}
    }
  }
}
